# -*- coding: utf-8 -*-
"""Diabetes Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_myUP_IITJHHCV1NvticlSDI1yWk3wD_

# Library Import

Mengimport semua library yang diperlukan
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Dropout
from google.colab import files

"""# Dataset

Dataset yang digunakan diambil dari dataset Kaggle yang dapat diunduh dari link di bawah ini

https://www.kaggle.com/datasets/andrewmvd/early-diabetes-classification

Kemudian upload dataset tersebut
"""

uploaded = files.upload()

df = pd.read_csv('diabetes_data.csv', sep=';')
df

"""# Data Preprocessing

Meliat summary dataset menggunakan .info()
"""

df.info()

"""Mengubah data kategorikal pada kolom gender menjadi numerik. Male menjadi 0 dan Female menjadi 1"""

df.gender[df.gender == 'Male'] = 0
df.gender[df.gender == 'Female'] = 1

"""Mengecek apakah terdapat data yang *null* atau data kosong"""

df.isnull().sum()

"""Membagi dataset menjadi data X sebagai variabel independen dan data y atau label sebagai variabel dependen """

X = df.iloc[:, 0:16].values
y = df.iloc[:, 16].values

"""Melakukan train test split data dengan proporsi test size sebesar 0.3 atau 30%"""

X_train, X_test, y_train, y_test = train_test_split(
  X, y, test_size=0.3
)

"""Mengubah data X dan y pada masing-masing training data dan test data menjadi float"""

X_train = X_train.astype(np.float32)
X_test = X_test.astype(np.float32)

y_train = y_train.astype(np.float32)
y_test = y_test.astype(np.float32)

"""# Model Development

Membuat model machine learning dengan arsitektur 1 input layer, 3 Dense layer, 2 Dropout layer, dan 1 output layer
"""

model = Sequential([
  Dense(128, activation='relu', input_shape=(16,)),
  Dense(64, activation='relu'),
  Dropout(0.25),
  Dense(32, activation='relu'),
  Dropout(0.25),
  Dense(1, activation='sigmoid')
])

"""Mengcompile model dengan adam optimizer, loss function binary crossentropy, dan metrics accuracy"""

model.compile(
  optimizer='adam',
  loss='binary_crossentropy',
  metrics=['accuracy']
)

"""Memasukkan atau melatih model dengan data training dan juga data testing pada validation data."""

h = model.fit(
  X_train, y_train,
  validation_data=(X_test, y_test),
  epochs=100)

"""# Model Evaluation

Evaluasi model machine learning dengan data testing.
"""

model.evaluate(X_test, y_test)

"""Membuat grafik atau plot dari akurasi dan loss hasil training model di atas """

plt.plot(h.history['accuracy'], label='accuracy')
plt.plot(h.history['val_accuracy'], label='val accuracy')
plt.title('Model Accuracy Plot')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

plt.plot(h.history['loss'], label='loss')
plt.plot(h.history['val_loss'], label='val_loss')
plt.title('Model Loss Plot')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend(loc='upper right')
plt.show()

"""Berdasarkan grafik di atas dapat dilihat bahwa akurasi model meningkat seiring bertambahnya epoch, dan loss menurun dengan seiring bertambahnya epoch.

# Model Testing

Menguji model dengan data yang baru dengan membuat list data yang baru
"""

test_data = [[35,'Female',0,1,1,1,1,0,0,1,0,0,1,0,0,0],  # label 1
             [70,'Male',1,0,1,1,1,1,0,0,1,1,1,1,1,0],    # label 1
             [51,'Female',0,0,0,0,0,1,0,1,0,1,0,0,1,0],  # label 0
             [55,'Male',0,0,0,1,1,0,1,1,0,1,0,1,0,1]]    # label 0

"""Mengubah data Female dan Male menjadi numerik"""

for i in range(len(test_data)):
  if (test_data[i][1] == 'Male'):
    test_data[i][1] = 0
  else:
    test_data[i][1] = 1

"""Memprediksi model dengan data yang baru"""

prediction = model.predict([test_data[0]])
prediction

if (prediction < 0.5):
  print('Tidak Diabtes')
else:
  print('Diabetes')

"""# Kesimpulan

Berdasarkan analisis terhadap hasil akurasi dan tingkat loss model machine learning tersebut dapat disimpulkan bahwa model berhasil mengklasifikasikan data orang yang terkena diabetes dan orang yang tidak terkena diabetes menggunakan metode Deep Learning. Model tersebut menunjukkan tingkat akurasi sebesar 94.78% dalam evaluasi model, yang menunjukkan kemampuan yang baik dalam mengklasifikasikan penyakit diabetes. Selain itu, hasil dari loss function pada model tersebut juga cukup rendah 0.1608, yang menunjukkan bahwa model memiliki kemampuan yang baik dalam mengurangi kesalahan prediksi.
"""

model.save('saved_model')
model.save('saved_model.h5')

!zip -r saved_model.zip saved_model/

files.download('saved_model.zip')
files.download('saved_model.h5')